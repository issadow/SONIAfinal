import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import static icaro.aplicaciones.recursos.recursoCalendario.imp.RecursoCalendarioImp.*;
import static icaro.aplicaciones.recursos.persistenciaUsuarios.imp.PersistenciaUsuariosImp.*;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.PerformativaUsuario;
import icaro.infraestructura.entidadesBasicas.comunicacion.*
import icaro.aplicaciones.agentes.AgenteAplicacionDialogoPaciente.objetivos.*;
import icaro.aplicaciones.informacion.gestionCitas.*;
import icaro.aplicaciones.agentes.AgenteAplicacionDialogoPaciente.tareas.*;
import icaro.aplicaciones.agentes.AgenteAplicacionDialogoPaciente.tools.*;
import icaro.aplicaciones.agentes.AgenteAplicacionIdentificador.tareas.*;
import icaro.aplicaciones.agentes.AgenteAplicacionIdentificador.tools.*;
import icaro.aplicaciones.agentes.AgenteAplicacionIdentificador.objetivos.*;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;

rule "Notificar desconocimiento"
 when
 	notif:NotificacionPaciente(user:identNotificador, tipoNotificacion == VocabularioGestionCitas.ExtraccionSemanticaNull )
 	fc:FocoUsuario(usuario == user )
 then
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(NotificarAlUsuarioSinContextoPaciente.class);
    tarea.ejecutar(fc);
    retract(notif);
    update(fc);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Recibir usuario identificado"
 when
 	notif:NotificacionIdentificado(user:identNotificador)
 then
 	Objetivo id = new IdentificarUsuario();
 	id.setobjectReferenceId(user);
 	id.setSolved();
 	UsuarioContexto cu = obtenerContextoUsuario(user);
 	insert(cu);
    retract(notif);
    insert(id);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end


rule "crear foco usuario"
 when 
 	notif:NotificacionPaciente(identInterlc:identNotificador)
 	not( exists( FocoUsuario(usuario == identInterlc ) ))
 then
 	//Establezco el foco del usuario
 	FocoUsuario fu = new FocoUsuario(identInterlc);
 	 	
 	insert(fu);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Resolicitar cita"
 when
 	notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotifPaciente.inicioPeticion);
 	fu:FocoUsuario(usuario == identInterlc, foco != null)
 then
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
 	tarea.ejecutar(identInterlc,conversacionPaciente.msg("focoRepetido"));
 	 	 recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
 	retract(notif);
end

rule "Solicitud peticion de cita"
 when 	
 	notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotifPaciente.inicioPeticion);
	fu:FocoUsuario(usuario == identInterlc, foco == null)
 then 
 	Tarea tareadist = gestorTareas.crearTarea(NotificarObjetivo.class);
    tareadist.ejecutar(identInterlc,notif,"PACIENTE"); 	
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
 	tarea.ejecutar(identInterlc,conversacionPaciente.msg("dameDatos"));
 	Objetivo cita = new CrearCita();
 	cita.setobjectReferenceId(identInterlc);
 	Objetivo idmedico = new IdentificarMedico();
 	idmedico.setobjectReferenceId(identInterlc);
 	Objetivo idfecha = new ObtenerFechaCita();
 	idfecha.setobjectReferenceId(identInterlc);
 	CitaMedica citamed = new CitaMedica();
 	citamed.usuario = identInterlc;
 	insert(citamed);
 	fu.setFoco(cita);
 	insert(cita);
 	insert(idmedico);
 	insert(idfecha);
 	retract(notif);
 	update(fu);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Notificar semantica incorrecta: pidiendo datos"
 when
 	notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotif.idgrupo
 	|| tipoNotificacion == tipoNotifPaciente.si || tipoNotificacion == tipoNotifPaciente.no );
 	obj:CrearCita(state == Objetivo.PENDING, objectReferenceId == identInterlc)
	fu:FocoUsuario(usuario == identInterlc, foco == obj)
	cm:CitaMedica(usuario == identInterlc)
 then
 	
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(NotificarAlContextoIncorrecto.class);
    tarea.ejecutar(fu);
 	retract(notif);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end



rule "Obtener nombre medico"
 when
 	notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotifPaciente.nombre,  msgg:mensajeNotificacion );
 	nom:IdentificarMedico(state == Objetivo.PENDING, objectReferenceId == identInterlc)
 	obj:CrearCita(state == Objetivo.PENDING, objectReferenceId == identInterlc)
	fu:FocoUsuario(usuario == identInterlc, foco == obj)
	cm:CitaMedica(usuario == identInterlc)
 then
 	nom.setSolved();
 	cm.nombreMedico = msgg;
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
 	tarea.ejecutar(identInterlc,conversacionPaciente.msg("medicoRegistrado"));
 	update(nom);
 	retract(notif);
 	 recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end


rule "Actualizo el nombre medico"
 when
 	notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotifPaciente.nombre,  msgg:mensajeNotificacion );
 	nom:IdentificarMedico(state == Objetivo.SOLVED, objectReferenceId == identInterlc)
 	obj:CrearCita(state == Objetivo.PENDING, objectReferenceId == identInterlc)
	fu:FocoUsuario(usuario == identInterlc, foco == obj)
	cm:CitaMedica(usuario == identInterlc)
 then
 	nom.setSolved();
 	cm.nombreMedico = msgg;
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
 	tarea.ejecutar(identInterlc,conversacionPaciente.msg("medicoRegistradoActualizar"));
 	update(nom);
 	retract(notif);
 	 recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end


rule "Obtener fecha"
 when
 	notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotifPaciente.fecha,  msgg:mensajeNotificacion );
 	nom:ObtenerFechaCita(state == Objetivo.PENDING, objectReferenceId == identInterlc)
 	obj:CrearCita(state == Objetivo.PENDING, objectReferenceId == identInterlc)
	fu:FocoUsuario(usuario == identInterlc, foco == obj)
	cm:CitaMedica(usuario == identInterlc)
 then
 	nom.setSolved();
 	cm.fecha = msgg;
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
 	tarea.ejecutar(identInterlc,conversacionPaciente.msg("fechaRegistrada"));
 	update(nom);
 	retract(notif);
 	 recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end


rule "Actualizar fecha"
 when
 	notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotifPaciente.fecha,  msgg:mensajeNotificacion );
 	nom:ObtenerFechaCita(state == Objetivo.SOLVED, objectReferenceId == identInterlc)
 	obj:CrearCita(state == Objetivo.PENDING, objectReferenceId == identInterlc)
	fu:FocoUsuario(usuario == identInterlc, foco == obj)
	cm:CitaMedica(usuario == identInterlc)
 then
 	nom.setSolved();
 	
 	cm.fecha = msgg;
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
 	tarea.ejecutar(identInterlc,conversacionPaciente.msg("fechaRegistradaActualizar"));
 	update(nom);
 	retract(notif);
 	 recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Focalizar crear cita"
 when
 	ofc:ObtenerFechaCita(state == Objetivo.SOLVED, identInterlc:objectReferenceId)
 	im:IdentificarMedico(state == Objetivo.SOLVED, objectReferenceId == identInterlc)
 	cc:CrearCita(state == Objetivo.PENDING, objectReferenceId == identInterlc)
 	cm:CitaMedica(usuario == identInterlc)
 then
 	cc.setSolving();
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tarea.ejecutar(identInterlc,"Necesito que me confirmes la cita, estos datos son correctos fecha: "+cm.fecha +" , con el Medico: "+cm.nombreMedico+", estas de acuerdo?");
 	retract(ofc);
 	retract(im);
 	update(cc);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Confirmacion de cita"
 when
 	notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotifPaciente.si, msgg:mensajeNotificacion )
 	cc:CrearCita(state == Objetivo.SOLVING, objectReferenceId == identInterlc)
 	obj:IdentificarUsuario(state == Objetivo.SOLVED, objectReferenceId == identInterlc)
 then
 	Objetivo confirmar = new Confirmacion();
 	confirmar.setobjectReferenceId(identInterlc);
 	confirmar.setSolving();
 	insert(confirmar);
 	retract(notif)
 
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Confirmacion de cita sin identificar al usuario"
 when
 	notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotifPaciente.si, msgg:mensajeNotificacion )
 	cc:CrearCita(state == Objetivo.SOLVING, objectReferenceId == identInterlc)
 	not( exists( IdentificarUsuario(objectReferenceId == identInterlc ) ))
 	fc:FocoUsuario(fcuser:usuario)
 then
 	Objetivo id = new IdentificarUsuario();
 	id.setobjectReferenceId(identInterlc);
 	insert(id);
 	fc.setFoco(null);
 	UsuarioContexto cu = new UsuarioContexto();
 	cu.usuario = identInterlc;
 	insert( cu );
 	
 	TareaSincrona tareadist = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tareadist.ejecutar(identInterlc,conversacion.msg("solicitarNuevamenteIDGrupo")); 	
 	update(fc);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end


rule "Notificar semantica incorrecta: confirmando"
 when
 	notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotif.idgrupo
 	|| tipoNotificacion == tipoNotifPaciente.nombre || tipoNotificacion == tipoNotifPaciente.fecha );
 	obj:CrearCita(state == Objetivo.SOLVING, objectReferenceId == identInterlc)
	fu:FocoUsuario(usuario == identInterlc, foco == obj)
	cm:CitaMedica(usuario == identInterlc)
 then
 	
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(NotificarAlContextoIncorrecto.class);
    tarea.ejecutar(fu);
 	retract(notif);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "No confirmacion de cita"
 when
 	notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotifPaciente.no, msgg:mensajeNotificacion )
 	cc:CrearCita(state == Objetivo.SOLVING, objectReferenceId == identInterlc)
 then
 	
 	Objetivo confirmar = new Confirmacion();
 	confirmar.setobjectReferenceId(identInterlc);
 	confirmar.setFailed();
 	insert(confirmar);
 
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end


rule "Establecer cita"
 when
 	obj:CrearCita(state == Objetivo.SOLVING, identInterlc:objectReferenceId)
	fu:FocoUsuario(usuario == identInterlc)
	cc:Confirmacion(state == Objetivo.SOLVING, objectReferenceId == identInterlc)
	cm:CitaMedica(usuario == identInterlc)
	cu:UsuarioContexto(usuario == identInterlc)
 then
 	TareaSincrona tareadist = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tareadist.ejecutar(identInterlc,conversacionPaciente.obtenerInfoCita4todoCompletado); 	
 	Tarea tareadist2 = gestorTareas.crearTarea(NotificarObjetivo.class);
    tareadist2.ejecutar(identInterlc,null,"RESET"); 
 	
 	fu.setFoco(null);
 	cm.dniPaciente = cu.idGrupo;
 	cm.nombrePaciente = cu.nombre;
 	
 	// AQUI LLAMAREMOS AL RECURSO DE CALENDARIO Y ALMACENAMOS TODO
 
 	String msgToMedic = null;
 	TareaSincrona informar = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
 	// Si no hay errores, se pone un mensaje para avisar al medico
 	if (insertaCita(cm)){
 		msgToMedic = "El paciente " + getNombrePersistenciaUsuarios(cm.getUsuario()) + " ha reservado una cita para el dia " + cm.getFecha();
  		informar.ejecutar(getUsuarioPersistenciaUsuarios(cm.getNombreMedico()),msgToMedic);  
    } else {
  		informar.ejecutar(identInterlc, "Ha ocurrido un error inesperado, por favor vuelve a intentarlo mas tarde. La cita posiblemente no sea valida.");
	}
 	
 	update(fu);
 	retract(cm);
 	retract(cc);
 	retract(obj);
 	 recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Cancelar cita"
 when
 	obj:CrearCita(state == Objetivo.SOLVING, identInterlc:objectReferenceId)
	fu:FocoUsuario(usuario == identInterlc, foco == obj)
	cc:Confirmacion(state == Objetivo.FAILED, objectReferenceId == identInterlc)
	cm:CitaMedica(usuario == identInterlc)
 then
 	TareaSincrona tareadist = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tareadist.ejecutar(identInterlc,conversacionPaciente.obtenerInfoCita4cancelado); 	
 	Tarea tareadist2 = gestorTareas.crearTarea(NotificarObjetivo.class);
    tareadist2.ejecutar(identInterlc,null,"RESET"); 
 	
 	fu.setFoco(null);
 	
 	// AQUI LLAMAREMOS AL RECURSO DE CANLENDARIO Y ALMACENAMOS TODO
 	darBajaCita(cm);
 	 	
 	update(fu);
 	retract(cm);
 	retract(cc);
 	retract(obj);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end


rule "Consultar citas, teniendo el paciente"
 when
    notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotifPaciente.consulta, msgg:mensajeNotificacion )
 	obj:IdentificarUsuario(state == Objetivo.SOLVED, objectReferenceId == identInterlc )
 then
 	// aqui habria que ir al recurso calendario para obtener las citas una a una
    String citas = consultaCitas(identInterlc);
    
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tarea.ejecutar(identInterlc,citas);
    
    Tarea tarea2 = gestorTareas.crearTarea(NotificarObjetivo.class);
    tarea2.ejecutar(identInterlc,notif,"RESET"); 	
    
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end

rule "Consultar citas, teniendo el paciente no identificado"
 when
    notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotifPaciente.consulta, msgg:mensajeNotificacion )
    not( exists( IdentificarUsuario(objectReferenceId == identInterlc ) ))
 then
 	Tarea tarea = gestorTareas.crearTarea(NotificarObjetivo.class);
    tarea.ejecutar(identInterlc,notif,"PACIENTE"); 	
 
 	UsuarioContexto cu = new UsuarioContexto();
 	cu.usuario = identInterlc;
 	insert( cu );
 	Objetivo id = new IdentificarUsuario();
 	id.setobjectReferenceId(identInterlc);
 	insert(id);
 	
 	TareaSincrona tareadist = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tareadist.ejecutar(identInterlc,conversacion.msg("solicitarNuevamenteIDGrupo")); 	
 	
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end



rule "Anular cita"
 when
  	notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotif.anular);
 then
 	Tarea tareadist2 = gestorTareas.crearTarea(NotificarObjetivo.class);
    tareadist2.ejecutar(identInterlc,null,"RESET"); 
 	notif.setTipoNotificacion(tipoNotifPaciente.session);
 	update(notif);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end


rule "Eliminar Session"
 when
    notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotifPaciente.session )
 then
    
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(EliminarSessionUsuarioPaciente.class);
    tarea.ejecutar(identInterlc);
    
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end




/// IDENTIFICACION DEL USUARIO



rule "Finalizar la identificacion"
 when
 	ObtenerIDGrupo(user:objectReferenceId, state == Objetivo.SOLVED);
 	ObtenerNombre(objectReferenceId == user, state == Objetivo.SOLVED)
 	obj:IdentificarUsuario(state == Objetivo.PENDING ,objectReferenceId == user )
 	cu:UsuarioContexto(usuario == user)
 	fc:FocoUsuario(usuario == user)
 then
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(UsuarioIdentificado.class);
 	tarea.ejecutar(user, cu);
 	fc.setFoco(null);
 	
 	Tarea tarea2 = gestorTareas.crearTarea(NotificarUsuarioIdentificado.class);
    tarea2.ejecutar(cu);
    insertarUsuario(user,cu);
 	
 
 	obj.setSolved();
 	update(obj);
 	update(fc);
end


rule "Regla de solicitar nombre"
 when
 	
 	fc:FocoUsuario(fcuser:usuario , foco == null)
 	obj:IdentificarUsuario(state == Objetivo.PENDING ,objectReferenceId == fcuser )
 	not( exists (ObtenerNombre(objectReferenceId == fcuser)))
 then
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
  	Objetivo no = new ObtenerNombre();
  	no.setobjectReferenceId(fcuser);
  	fc.setFoco(no);
  	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tarea.ejecutar(fcuser,conversacion.msg("solicitarNombre"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	update(fc);
   	insert(no);
end

rule "Regla de obtencion de nombre"
 when
	obj:ObtenerNombre(user:objectReferenceId, state == Objetivo.PENDING)
 	fc:FocoUsuario(usuario == user, foco == obj )
    notif:NotificacionPaciente(identNotificador == user, tipoNotificacion == tipoNotif.nombre, msgg:mensajeNotificacion )
    cu:UsuarioContexto(usuario == user)
 then
 	obj.setSolved();
 	cu.setNombre(msgg);
 	cu.actividad();
 	fc.setFoco(null);
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(SolicitarNombre.class);
    tarea.ejecutar(user,conversacion.msg("obtencionNombre"),msgg);
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	
   	update(obj);
   	update(fc);
   	retract(notif);
end


rule "Regla de solicitud del identificador del grupo"
 when
 	fc:FocoUsuario(fcuser:usuario , foco == null)
 	obj:IdentificarUsuario(state == Objetivo.PENDING ,objectReferenceId == fcuser )
 	not( exists (ObtenerIDGrupo(objectReferenceId == fcuser)))
 then

  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
  	Objetivo ob = new ObtenerIDGrupo();	
	ob.setobjectReferenceId(fcuser);
	insert(ob);
	fc.setFoco(ob);
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
  	tarea.ejecutar(fcuser, conversacion.msg("peticionIDGrupo"));
  
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    update(obj);
    update(fc);
end

rule "Regla de obtencion del identificador del grupo"
 when
 	obj:ObtenerIDGrupo(user:objectReferenceId, state == Objetivo.PENDING)
 	fc:FocoUsuario(usuario == user, foco == obj )
    notif:NotificacionPaciente(identNotificador == user, tipoNotificacion == tipoNotif.idgrupo, msgg:mensajeNotificacion )
    cu:UsuarioContexto(usuario == user)
 then
 	obj.setSolved();
 	cu.setIdGrupo(msgg);
 	cu.actividad();
 	fc.setFoco(null);
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ObtenerGrupoDesdePersistencia.class);
    tarea.ejecutar(user,cu);
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	
   	update(obj);
   	update(fc);
   	retract(notif);
end
